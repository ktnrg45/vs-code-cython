---
name: Cython
scopeName: source.cython
fileTypes: [pyx, pxd, pxi]
firstLineMatch: ^#cython
patterns:
  - include: "#statement"
  - include: "#expression"

repository:
  statement:
    patterns:
      - include: "#import"
      - include: "source.python#statement"

  expression:
    patterns:
      - include: "#literal"
      - include: "#illegal-names"
      - include: "source.python#expression"

  import:
    comment: |
      Import statements used to correctly mark `from`, `cimport`, and `as`
    patterns:
      - begin: \b(?<!\.)(from)\b(?=.+cimport)
        end: $|(?=cimport)
        beginCaptures:
          "1": { name: keyword.control.import.cython }
        patterns:
          - name: punctuation.separator.period.cython
            match: \.+
          - include: "#expression"

      - begin: \b(?<!\.)(cimport)\b
        end: $
        beginCaptures:
          "1": { name: keyword.control.import.cython }
        patterns:
          - name: keyword.control.import.cython
            match: \b(?<!\.)as\b
          - include: "#expression"

  literal:
    patterns:
      - name: constant.language.cython
        match: \b(NULL)\b
      - include: "source.python#literal"

  illegal-names:
    patterns:
      - include: "source.python#illegal-names"
      - match: |
          (?x)
            \b(?:
              (
                nogil | gil | include | extern | extern from | noexcept | namespace
              ) | (
                as | cimport
              ) | (
                cdef | cpdef | ctypedef | DEF | IF | ELSE | ELIF
              ) | (
                const | unsigned | signed | new | readonly | inline | public | cppclass | packed(?=\s+struct)
              )
            )\b
        captures:
          "1": { name: keyword.control.flow.cython }
          "2": { name: keyword.control.import.cython }
          "3": { name: storage.type.declaration.cython }
          "4": { name: storage.type.modifiers.cython }
